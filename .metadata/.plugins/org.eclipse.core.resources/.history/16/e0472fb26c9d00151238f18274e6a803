package com.cook;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.*;

import com.cook.R;
import com.cook.bean.User;
import com.cook.db.dao.DishesDao;

import android.annotation.SuppressLint;
import android.app.ActivityManager;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.FragmentPagerAdapter;
import android.support.v4.view.ViewPager;
import android.support.v4.view.ViewPager.OnPageChangeListener;
import android.view.KeyEvent;
import android.view.Menu;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewConfiguration;
import android.view.Window;


@SuppressLint("NewApi")
public class MainActivity extends FragmentActivity implements OnPageChangeListener, OnClickListener {
	
	private ViewPager mViewPager;
	//列表保存页面
	private List<Fragment> mTabs = new ArrayList<Fragment>();
	private FragmentPagerAdapter mAdapter;
	
	private IndexFragment indexfragment;
	private DishesSearchFragment dishessearchfragment;
	private MyFragment myfragment;

	//列表保存导航按钮
	private List<ChangeColorIconWithTextView> mTabIndicator = new ArrayList<ChangeColorIconWithTextView>();

	private User user=null;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		AgentApplication.addActivity(MainActivity.this);

		setOverflowShowingAlways();
		getActionBar().setDisplayShowHomeEnabled(false);
		mViewPager = (ViewPager) findViewById(R.id.id_viewpager);

		initDatas();
		
		mViewPager.setAdapter(mAdapter);
		mViewPager.setOnPageChangeListener(this);
		
	}

	private void initDatas() {	//初始化页面
		indexfragment = new IndexFragment();
		dishessearchfragment = new DishesSearchFragment();
		myfragment = new MyFragment();
 
		mTabs.add(indexfragment);
		mTabs.add(dishessearchfragment);
		mTabs.add(myfragment);

		mAdapter = new FragmentPagerAdapter(getSupportFragmentManager()) {
			@Override
			public int getCount() {
				return mTabs.size();
			}
			@Override
			public Fragment getItem(int arg0) {
				return mTabs.get(arg0);
			}
		};

		initTabIndicator();
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {		//创建菜单栏
		getMenuInflater().inflate(R.menu.main, menu);
		return true;
	}

	private void initTabIndicator() {	//初始化导航按钮
		ChangeColorIconWithTextView one = (ChangeColorIconWithTextView) findViewById(R.id.id_indicator_one);
		ChangeColorIconWithTextView two = (ChangeColorIconWithTextView) findViewById(R.id.id_indicator_two);
		ChangeColorIconWithTextView three = (ChangeColorIconWithTextView) findViewById(R.id.id_indicator_three);

		mTabIndicator.add(one);
		mTabIndicator.add(two);
		mTabIndicator.add(three);

		one.setOnClickListener(this);
		two.setOnClickListener(this);
		three.setOnClickListener(this);

		one.setIconAlpha(1.0f);
	}

	@Override
	public void onPageSelected(int arg0) {
	}

	@Override
	public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {	//页面滑动时的事件处理

		if (positionOffset > 0) {
			ChangeColorIconWithTextView left = mTabIndicator.get(position);
			ChangeColorIconWithTextView right = mTabIndicator.get(position + 1);

			left.setIconAlpha(1 - positionOffset);
			right.setIconAlpha(positionOffset);
		}

	}

	@Override
	public void onPageScrollStateChanged(int state) {

	}

	@Override
	public void onClick(View v) {	//导航按钮被选中时的事件处理

		resetOtherTabs();

		switch (v.getId()) {
			case R.id.id_indicator_one:
				mTabIndicator.get(0).setIconAlpha(1.0f);
				mViewPager.setCurrentItem(0, false);
				break;
			case R.id.id_indicator_two:
				mTabIndicator.get(1).setIconAlpha(1.0f);
				mViewPager.setCurrentItem(1, false);
				break;
			case R.id.id_indicator_three:
				mTabIndicator.get(2).setIconAlpha(1.0f);
				mViewPager.setCurrentItem(2, false);
				break;
		}

	}

	/**
	 * 重置其他的Tab
	 */
	private void resetOtherTabs() {
		for (int i = 0; i < mTabIndicator.size(); i++) {
			mTabIndicator.get(i).setIconAlpha(0);
		}
	}

	@Override
	public boolean onMenuOpened(int featureId, Menu menu) {
		if (featureId == Window.FEATURE_ACTION_BAR && menu != null) {
			if (menu.getClass().getSimpleName().equals("MenuBuilder")) {
				try {
					Method m = menu.getClass().getDeclaredMethod(
							"setOptionalIconsVisible", Boolean.TYPE);
					m.setAccessible(true);
					m.invoke(menu, true);
				} catch (Exception e) {
				}
			}
		}
		return super.onMenuOpened(featureId, menu);
	}

	private void setOverflowShowingAlways() {
		try {
			// true if a permanent menu key is present, false otherwise.
			ViewConfiguration config = ViewConfiguration.get(this);
			Field menuKeyField = ViewConfiguration.class
					.getDeclaredField("sHasPermanentMenuKey");
			menuKeyField.setAccessible(true);
			menuKeyField.setBoolean(config, false);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	@Override
	public boolean onKeyUp(int keyCode, KeyEvent event) {
		// TODO Auto-generated method stub
		switch (keyCode) {   
        case KeyEvent.KEYCODE_BACK:   
            AlertDialog.Builder build=new AlertDialog.Builder(this);   
            build.setMessage("亲，真的要离开吗？")   
                    .setPositiveButton("现在离开", new DialogInterface.OnClickListener() {   
                        @Override  
                        public void onClick(DialogInterface dialog, int which) {   
//                            finish();
                        	System.exit(0);
                        	
                        }   
                    }).setNegativeButton("再看看吧", new DialogInterface.OnClickListener() {   
                        @Override  
                        public void onClick(DialogInterface dialog, int which) {   
                        }   
                    }).show();   
            break;   
        default:   
            break;   
        }   
        return false;
	}

}